schema {
  query: query_root
  mutation: mutation_root
  subscription: subscription_root
}

"""whether this query should be cached (Hasura Cloud only)"""
directive @cached(
  """measured in seconds"""
  ttl: Int! = 60

  """refresh the cache entry"""
  refresh: Boolean! = false
) on QUERY

"""
Boolean expression to compare columns of type "Boolean". All fields are combined with logical 'AND'.
"""
input Boolean_comparison_exp {
  _eq: Boolean
  _gt: Boolean
  _gte: Boolean
  _in: [Boolean!]
  _is_null: Boolean
  _lt: Boolean
  _lte: Boolean
  _neq: Boolean
  _nin: [Boolean!]
}

"""
Boolean expression to compare columns of type "Int". All fields are combined with logical 'AND'.
"""
input Int_comparison_exp {
  _eq: Int
  _gt: Int
  _gte: Int
  _in: [Int!]
  _is_null: Boolean
  _lt: Int
  _lte: Int
  _neq: Int
  _nin: [Int!]
}

"""
Boolean expression to compare columns of type "String". All fields are combined with logical 'AND'.
"""
input String_comparison_exp {
  _eq: String
  _gt: String
  _gte: String

  """does the column match the given case-insensitive pattern"""
  _ilike: String
  _in: [String!]

  """
  does the column match the given POSIX regular expression, case insensitive
  """
  _iregex: String
  _is_null: Boolean

  """does the column match the given pattern"""
  _like: String
  _lt: String
  _lte: String
  _neq: String

  """does the column NOT match the given case-insensitive pattern"""
  _nilike: String
  _nin: [String!]

  """
  does the column NOT match the given POSIX regular expression, case insensitive
  """
  _niregex: String

  """does the column NOT match the given pattern"""
  _nlike: String

  """
  does the column NOT match the given POSIX regular expression, case sensitive
  """
  _nregex: String

  """does the column NOT match the given SQL regular expression"""
  _nsimilar: String

  """
  does the column match the given POSIX regular expression, case sensitive
  """
  _regex: String

  """does the column match the given SQL regular expression"""
  _similar: String
}

"""
columns and relationships of "biscoint.offer"
"""
type biscoint_offer {
  apiKeyId: String!
  base: String!
  baseAmount: String!
  confirmedAt: timestamptz
  createdAt: timestamptz!
  efPrice: String!
  expiresAt: timestamptz!
  id: Int!
  isQuote: Boolean!
  offerId: String!
  op: String!
  quote: String!
  quoteAmount: String!
}

"""
aggregated selection of "biscoint.offer"
"""
type biscoint_offer_aggregate {
  aggregate: biscoint_offer_aggregate_fields
  nodes: [biscoint_offer!]!
}

"""
aggregate fields of "biscoint.offer"
"""
type biscoint_offer_aggregate_fields {
  avg: biscoint_offer_avg_fields
  count(columns: [biscoint_offer_select_column!], distinct: Boolean): Int!
  max: biscoint_offer_max_fields
  min: biscoint_offer_min_fields
  stddev: biscoint_offer_stddev_fields
  stddev_pop: biscoint_offer_stddev_pop_fields
  stddev_samp: biscoint_offer_stddev_samp_fields
  sum: biscoint_offer_sum_fields
  var_pop: biscoint_offer_var_pop_fields
  var_samp: biscoint_offer_var_samp_fields
  variance: biscoint_offer_variance_fields
}

"""aggregate avg on columns"""
type biscoint_offer_avg_fields {
  id: Float
}

"""
Boolean expression to filter rows from the table "biscoint.offer". All fields are combined with a logical 'AND'.
"""
input biscoint_offer_bool_exp {
  _and: [biscoint_offer_bool_exp!]
  _not: biscoint_offer_bool_exp
  _or: [biscoint_offer_bool_exp!]
  apiKeyId: String_comparison_exp
  base: String_comparison_exp
  baseAmount: String_comparison_exp
  confirmedAt: timestamptz_comparison_exp
  createdAt: timestamptz_comparison_exp
  efPrice: String_comparison_exp
  expiresAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  isQuote: Boolean_comparison_exp
  offerId: String_comparison_exp
  op: String_comparison_exp
  quote: String_comparison_exp
  quoteAmount: String_comparison_exp
}

"""
unique or primary key constraints on table "biscoint.offer"
"""
enum biscoint_offer_constraint {
  """unique or primary key constraint"""
  offer_offerId_key

  """unique or primary key constraint"""
  offer_pkey
}

"""
input type for incrementing numeric columns in table "biscoint.offer"
"""
input biscoint_offer_inc_input {
  id: Int
}

"""
input type for inserting data into table "biscoint.offer"
"""
input biscoint_offer_insert_input {
  apiKeyId: String
  base: String
  baseAmount: String
  confirmedAt: timestamptz
  createdAt: timestamptz
  efPrice: String
  expiresAt: timestamptz
  id: Int
  isQuote: Boolean
  offerId: String
  op: String
  quote: String
  quoteAmount: String
}

"""aggregate max on columns"""
type biscoint_offer_max_fields {
  apiKeyId: String
  base: String
  baseAmount: String
  confirmedAt: timestamptz
  createdAt: timestamptz
  efPrice: String
  expiresAt: timestamptz
  id: Int
  offerId: String
  op: String
  quote: String
  quoteAmount: String
}

"""aggregate min on columns"""
type biscoint_offer_min_fields {
  apiKeyId: String
  base: String
  baseAmount: String
  confirmedAt: timestamptz
  createdAt: timestamptz
  efPrice: String
  expiresAt: timestamptz
  id: Int
  offerId: String
  op: String
  quote: String
  quoteAmount: String
}

"""
response of any mutation on the table "biscoint.offer"
"""
type biscoint_offer_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [biscoint_offer!]!
}

"""
input type for inserting object relation for remote table "biscoint.offer"
"""
input biscoint_offer_obj_rel_insert_input {
  data: biscoint_offer_insert_input!

  """on conflict condition"""
  on_conflict: biscoint_offer_on_conflict
}

"""
on conflict condition type for table "biscoint.offer"
"""
input biscoint_offer_on_conflict {
  constraint: biscoint_offer_constraint!
  update_columns: [biscoint_offer_update_column!]! = []
  where: biscoint_offer_bool_exp
}

"""Ordering options when selecting data from "biscoint.offer"."""
input biscoint_offer_order_by {
  apiKeyId: order_by
  base: order_by
  baseAmount: order_by
  confirmedAt: order_by
  createdAt: order_by
  efPrice: order_by
  expiresAt: order_by
  id: order_by
  isQuote: order_by
  offerId: order_by
  op: order_by
  quote: order_by
  quoteAmount: order_by
}

"""primary key columns input for table: biscoint_offer"""
input biscoint_offer_pk_columns_input {
  id: Int!
}

"""
select columns of table "biscoint.offer"
"""
enum biscoint_offer_select_column {
  """column name"""
  apiKeyId

  """column name"""
  base

  """column name"""
  baseAmount

  """column name"""
  confirmedAt

  """column name"""
  createdAt

  """column name"""
  efPrice

  """column name"""
  expiresAt

  """column name"""
  id

  """column name"""
  isQuote

  """column name"""
  offerId

  """column name"""
  op

  """column name"""
  quote

  """column name"""
  quoteAmount
}

"""
input type for updating data in table "biscoint.offer"
"""
input biscoint_offer_set_input {
  apiKeyId: String
  base: String
  baseAmount: String
  confirmedAt: timestamptz
  createdAt: timestamptz
  efPrice: String
  expiresAt: timestamptz
  id: Int
  isQuote: Boolean
  offerId: String
  op: String
  quote: String
  quoteAmount: String
}

"""aggregate stddev on columns"""
type biscoint_offer_stddev_fields {
  id: Float
}

"""aggregate stddev_pop on columns"""
type biscoint_offer_stddev_pop_fields {
  id: Float
}

"""aggregate stddev_samp on columns"""
type biscoint_offer_stddev_samp_fields {
  id: Float
}

"""aggregate sum on columns"""
type biscoint_offer_sum_fields {
  id: Int
}

"""
update columns of table "biscoint.offer"
"""
enum biscoint_offer_update_column {
  """column name"""
  apiKeyId

  """column name"""
  base

  """column name"""
  baseAmount

  """column name"""
  confirmedAt

  """column name"""
  createdAt

  """column name"""
  efPrice

  """column name"""
  expiresAt

  """column name"""
  id

  """column name"""
  isQuote

  """column name"""
  offerId

  """column name"""
  op

  """column name"""
  quote

  """column name"""
  quoteAmount
}

"""aggregate var_pop on columns"""
type biscoint_offer_var_pop_fields {
  id: Float
}

"""aggregate var_samp on columns"""
type biscoint_offer_var_samp_fields {
  id: Float
}

"""aggregate variance on columns"""
type biscoint_offer_variance_fields {
  id: Float
}

"""
columns and relationships of "biscoint.order"
"""
type biscoint_order {
  amount: String!
  base: String!
  checkedAt: timestamptz
  createdAt: timestamptz!
  id: Int!
  isQuote: Boolean!
  notBefore: timestamptz

  """An object relationship"""
  offer: biscoint_offer
  offerId: Int
  op: String!
  refPrice: String
  status: String!
}

"""
aggregated selection of "biscoint.order"
"""
type biscoint_order_aggregate {
  aggregate: biscoint_order_aggregate_fields
  nodes: [biscoint_order!]!
}

"""
aggregate fields of "biscoint.order"
"""
type biscoint_order_aggregate_fields {
  avg: biscoint_order_avg_fields
  count(columns: [biscoint_order_select_column!], distinct: Boolean): Int!
  max: biscoint_order_max_fields
  min: biscoint_order_min_fields
  stddev: biscoint_order_stddev_fields
  stddev_pop: biscoint_order_stddev_pop_fields
  stddev_samp: biscoint_order_stddev_samp_fields
  sum: biscoint_order_sum_fields
  var_pop: biscoint_order_var_pop_fields
  var_samp: biscoint_order_var_samp_fields
  variance: biscoint_order_variance_fields
}

"""aggregate avg on columns"""
type biscoint_order_avg_fields {
  id: Float
  offerId: Float
}

"""
Boolean expression to filter rows from the table "biscoint.order". All fields are combined with a logical 'AND'.
"""
input biscoint_order_bool_exp {
  _and: [biscoint_order_bool_exp!]
  _not: biscoint_order_bool_exp
  _or: [biscoint_order_bool_exp!]
  amount: String_comparison_exp
  base: String_comparison_exp
  checkedAt: timestamptz_comparison_exp
  createdAt: timestamptz_comparison_exp
  id: Int_comparison_exp
  isQuote: Boolean_comparison_exp
  notBefore: timestamptz_comparison_exp
  offer: biscoint_offer_bool_exp
  offerId: Int_comparison_exp
  op: String_comparison_exp
  refPrice: String_comparison_exp
  status: String_comparison_exp
}

"""
unique or primary key constraints on table "biscoint.order"
"""
enum biscoint_order_constraint {
  """unique or primary key constraint"""
  schedule_pkey
}

"""
input type for incrementing numeric columns in table "biscoint.order"
"""
input biscoint_order_inc_input {
  id: Int
  offerId: Int
}

"""
input type for inserting data into table "biscoint.order"
"""
input biscoint_order_insert_input {
  amount: String
  base: String
  checkedAt: timestamptz
  createdAt: timestamptz
  id: Int
  isQuote: Boolean
  notBefore: timestamptz
  offer: biscoint_offer_obj_rel_insert_input
  offerId: Int
  op: String
  refPrice: String
  status: String
}

"""aggregate max on columns"""
type biscoint_order_max_fields {
  amount: String
  base: String
  checkedAt: timestamptz
  createdAt: timestamptz
  id: Int
  notBefore: timestamptz
  offerId: Int
  op: String
  refPrice: String
  status: String
}

"""aggregate min on columns"""
type biscoint_order_min_fields {
  amount: String
  base: String
  checkedAt: timestamptz
  createdAt: timestamptz
  id: Int
  notBefore: timestamptz
  offerId: Int
  op: String
  refPrice: String
  status: String
}

"""
response of any mutation on the table "biscoint.order"
"""
type biscoint_order_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [biscoint_order!]!
}

"""
on conflict condition type for table "biscoint.order"
"""
input biscoint_order_on_conflict {
  constraint: biscoint_order_constraint!
  update_columns: [biscoint_order_update_column!]! = []
  where: biscoint_order_bool_exp
}

"""Ordering options when selecting data from "biscoint.order"."""
input biscoint_order_order_by {
  amount: order_by
  base: order_by
  checkedAt: order_by
  createdAt: order_by
  id: order_by
  isQuote: order_by
  notBefore: order_by
  offer: biscoint_offer_order_by
  offerId: order_by
  op: order_by
  refPrice: order_by
  status: order_by
}

"""primary key columns input for table: biscoint_order"""
input biscoint_order_pk_columns_input {
  id: Int!
}

"""
select columns of table "biscoint.order"
"""
enum biscoint_order_select_column {
  """column name"""
  amount

  """column name"""
  base

  """column name"""
  checkedAt

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  isQuote

  """column name"""
  notBefore

  """column name"""
  offerId

  """column name"""
  op

  """column name"""
  refPrice

  """column name"""
  status
}

"""
input type for updating data in table "biscoint.order"
"""
input biscoint_order_set_input {
  amount: String
  base: String
  checkedAt: timestamptz
  createdAt: timestamptz
  id: Int
  isQuote: Boolean
  notBefore: timestamptz
  offerId: Int
  op: String
  refPrice: String
  status: String
}

"""aggregate stddev on columns"""
type biscoint_order_stddev_fields {
  id: Float
  offerId: Float
}

"""aggregate stddev_pop on columns"""
type biscoint_order_stddev_pop_fields {
  id: Float
  offerId: Float
}

"""aggregate stddev_samp on columns"""
type biscoint_order_stddev_samp_fields {
  id: Float
  offerId: Float
}

"""aggregate sum on columns"""
type biscoint_order_sum_fields {
  id: Int
  offerId: Int
}

"""
update columns of table "biscoint.order"
"""
enum biscoint_order_update_column {
  """column name"""
  amount

  """column name"""
  base

  """column name"""
  checkedAt

  """column name"""
  createdAt

  """column name"""
  id

  """column name"""
  isQuote

  """column name"""
  notBefore

  """column name"""
  offerId

  """column name"""
  op

  """column name"""
  refPrice

  """column name"""
  status
}

"""aggregate var_pop on columns"""
type biscoint_order_var_pop_fields {
  id: Float
  offerId: Float
}

"""aggregate var_samp on columns"""
type biscoint_order_var_samp_fields {
  id: Float
  offerId: Float
}

"""aggregate variance on columns"""
type biscoint_order_variance_fields {
  id: Float
  offerId: Float
}

"""
columns and relationships of "biscoint.profit"
"""
type biscoint_profit {
  btc: numeric
  eth: numeric
}

"""
aggregated selection of "biscoint.profit"
"""
type biscoint_profit_aggregate {
  aggregate: biscoint_profit_aggregate_fields
  nodes: [biscoint_profit!]!
}

"""
aggregate fields of "biscoint.profit"
"""
type biscoint_profit_aggregate_fields {
  avg: biscoint_profit_avg_fields
  count(columns: [biscoint_profit_select_column!], distinct: Boolean): Int!
  max: biscoint_profit_max_fields
  min: biscoint_profit_min_fields
  stddev: biscoint_profit_stddev_fields
  stddev_pop: biscoint_profit_stddev_pop_fields
  stddev_samp: biscoint_profit_stddev_samp_fields
  sum: biscoint_profit_sum_fields
  var_pop: biscoint_profit_var_pop_fields
  var_samp: biscoint_profit_var_samp_fields
  variance: biscoint_profit_variance_fields
}

"""aggregate avg on columns"""
type biscoint_profit_avg_fields {
  btc: Float
  eth: Float
}

"""
Boolean expression to filter rows from the table "biscoint.profit". All fields are combined with a logical 'AND'.
"""
input biscoint_profit_bool_exp {
  _and: [biscoint_profit_bool_exp!]
  _not: biscoint_profit_bool_exp
  _or: [biscoint_profit_bool_exp!]
  btc: numeric_comparison_exp
  eth: numeric_comparison_exp
}

"""aggregate max on columns"""
type biscoint_profit_max_fields {
  btc: numeric
  eth: numeric
}

"""aggregate min on columns"""
type biscoint_profit_min_fields {
  btc: numeric
  eth: numeric
}

"""Ordering options when selecting data from "biscoint.profit"."""
input biscoint_profit_order_by {
  btc: order_by
  eth: order_by
}

"""
select columns of table "biscoint.profit"
"""
enum biscoint_profit_select_column {
  """column name"""
  btc

  """column name"""
  eth
}

"""aggregate stddev on columns"""
type biscoint_profit_stddev_fields {
  btc: Float
  eth: Float
}

"""aggregate stddev_pop on columns"""
type biscoint_profit_stddev_pop_fields {
  btc: Float
  eth: Float
}

"""aggregate stddev_samp on columns"""
type biscoint_profit_stddev_samp_fields {
  btc: Float
  eth: Float
}

"""aggregate sum on columns"""
type biscoint_profit_sum_fields {
  btc: numeric
  eth: numeric
}

"""aggregate var_pop on columns"""
type biscoint_profit_var_pop_fields {
  btc: Float
  eth: Float
}

"""aggregate var_samp on columns"""
type biscoint_profit_var_samp_fields {
  btc: Float
  eth: Float
}

"""aggregate variance on columns"""
type biscoint_profit_variance_fields {
  btc: Float
  eth: Float
}

"""
columns and relationships of "biscoint.trade"
"""
type biscoint_trade {
  checkedAt: timestamptz

  """An object relationship"""
  closeOffer: biscoint_offer
  closeOfferId: Int
  id: Int!

  """An object relationship"""
  openOffer: biscoint_offer!
  openOfferId: Int!
  owner: String
  status: String!
  strategy: String
  type: String
}

"""
aggregated selection of "biscoint.trade"
"""
type biscoint_trade_aggregate {
  aggregate: biscoint_trade_aggregate_fields
  nodes: [biscoint_trade!]!
}

"""
aggregate fields of "biscoint.trade"
"""
type biscoint_trade_aggregate_fields {
  avg: biscoint_trade_avg_fields
  count(columns: [biscoint_trade_select_column!], distinct: Boolean): Int!
  max: biscoint_trade_max_fields
  min: biscoint_trade_min_fields
  stddev: biscoint_trade_stddev_fields
  stddev_pop: biscoint_trade_stddev_pop_fields
  stddev_samp: biscoint_trade_stddev_samp_fields
  sum: biscoint_trade_sum_fields
  var_pop: biscoint_trade_var_pop_fields
  var_samp: biscoint_trade_var_samp_fields
  variance: biscoint_trade_variance_fields
}

"""aggregate avg on columns"""
type biscoint_trade_avg_fields {
  closeOfferId: Float
  id: Float
  openOfferId: Float
}

"""
Boolean expression to filter rows from the table "biscoint.trade". All fields are combined with a logical 'AND'.
"""
input biscoint_trade_bool_exp {
  _and: [biscoint_trade_bool_exp!]
  _not: biscoint_trade_bool_exp
  _or: [biscoint_trade_bool_exp!]
  checkedAt: timestamptz_comparison_exp
  closeOffer: biscoint_offer_bool_exp
  closeOfferId: Int_comparison_exp
  id: Int_comparison_exp
  openOffer: biscoint_offer_bool_exp
  openOfferId: Int_comparison_exp
  owner: String_comparison_exp
  status: String_comparison_exp
  strategy: String_comparison_exp
  type: String_comparison_exp
}

"""
unique or primary key constraints on table "biscoint.trade"
"""
enum biscoint_trade_constraint {
  """unique or primary key constraint"""
  trade_pkey
}

"""
input type for incrementing numeric columns in table "biscoint.trade"
"""
input biscoint_trade_inc_input {
  closeOfferId: Int
  id: Int
  openOfferId: Int
}

"""
input type for inserting data into table "biscoint.trade"
"""
input biscoint_trade_insert_input {
  checkedAt: timestamptz
  closeOffer: biscoint_offer_obj_rel_insert_input
  closeOfferId: Int
  id: Int
  openOffer: biscoint_offer_obj_rel_insert_input
  openOfferId: Int
  owner: String
  status: String
  strategy: String
  type: String
}

"""aggregate max on columns"""
type biscoint_trade_max_fields {
  checkedAt: timestamptz
  closeOfferId: Int
  id: Int
  openOfferId: Int
  owner: String
  status: String
  strategy: String
  type: String
}

"""aggregate min on columns"""
type biscoint_trade_min_fields {
  checkedAt: timestamptz
  closeOfferId: Int
  id: Int
  openOfferId: Int
  owner: String
  status: String
  strategy: String
  type: String
}

"""
response of any mutation on the table "biscoint.trade"
"""
type biscoint_trade_mutation_response {
  """number of rows affected by the mutation"""
  affected_rows: Int!

  """data from the rows affected by the mutation"""
  returning: [biscoint_trade!]!
}

"""
on conflict condition type for table "biscoint.trade"
"""
input biscoint_trade_on_conflict {
  constraint: biscoint_trade_constraint!
  update_columns: [biscoint_trade_update_column!]! = []
  where: biscoint_trade_bool_exp
}

"""Ordering options when selecting data from "biscoint.trade"."""
input biscoint_trade_order_by {
  checkedAt: order_by
  closeOffer: biscoint_offer_order_by
  closeOfferId: order_by
  id: order_by
  openOffer: biscoint_offer_order_by
  openOfferId: order_by
  owner: order_by
  status: order_by
  strategy: order_by
  type: order_by
}

"""primary key columns input for table: biscoint_trade"""
input biscoint_trade_pk_columns_input {
  id: Int!
}

"""
select columns of table "biscoint.trade"
"""
enum biscoint_trade_select_column {
  """column name"""
  checkedAt

  """column name"""
  closeOfferId

  """column name"""
  id

  """column name"""
  openOfferId

  """column name"""
  owner

  """column name"""
  status

  """column name"""
  strategy

  """column name"""
  type
}

"""
input type for updating data in table "biscoint.trade"
"""
input biscoint_trade_set_input {
  checkedAt: timestamptz
  closeOfferId: Int
  id: Int
  openOfferId: Int
  owner: String
  status: String
  strategy: String
  type: String
}

"""aggregate stddev on columns"""
type biscoint_trade_stddev_fields {
  closeOfferId: Float
  id: Float
  openOfferId: Float
}

"""aggregate stddev_pop on columns"""
type biscoint_trade_stddev_pop_fields {
  closeOfferId: Float
  id: Float
  openOfferId: Float
}

"""aggregate stddev_samp on columns"""
type biscoint_trade_stddev_samp_fields {
  closeOfferId: Float
  id: Float
  openOfferId: Float
}

"""aggregate sum on columns"""
type biscoint_trade_sum_fields {
  closeOfferId: Int
  id: Int
  openOfferId: Int
}

"""
update columns of table "biscoint.trade"
"""
enum biscoint_trade_update_column {
  """column name"""
  checkedAt

  """column name"""
  closeOfferId

  """column name"""
  id

  """column name"""
  openOfferId

  """column name"""
  owner

  """column name"""
  status

  """column name"""
  strategy

  """column name"""
  type
}

"""aggregate var_pop on columns"""
type biscoint_trade_var_pop_fields {
  closeOfferId: Float
  id: Float
  openOfferId: Float
}

"""aggregate var_samp on columns"""
type biscoint_trade_var_samp_fields {
  closeOfferId: Float
  id: Float
  openOfferId: Float
}

"""aggregate variance on columns"""
type biscoint_trade_variance_fields {
  closeOfferId: Float
  id: Float
  openOfferId: Float
}

"""mutation root"""
type mutation_root {
  """
  delete data from the table: "biscoint.offer"
  """
  delete_biscoint_offer(
    """filter the rows which have to be deleted"""
    where: biscoint_offer_bool_exp!
  ): biscoint_offer_mutation_response

  """
  delete single row from the table: "biscoint.offer"
  """
  delete_biscoint_offer_by_pk(id: Int!): biscoint_offer

  """
  delete data from the table: "biscoint.order"
  """
  delete_biscoint_order(
    """filter the rows which have to be deleted"""
    where: biscoint_order_bool_exp!
  ): biscoint_order_mutation_response

  """
  delete single row from the table: "biscoint.order"
  """
  delete_biscoint_order_by_pk(id: Int!): biscoint_order

  """
  delete data from the table: "biscoint.trade"
  """
  delete_biscoint_trade(
    """filter the rows which have to be deleted"""
    where: biscoint_trade_bool_exp!
  ): biscoint_trade_mutation_response

  """
  delete single row from the table: "biscoint.trade"
  """
  delete_biscoint_trade_by_pk(id: Int!): biscoint_trade

  """
  insert data into the table: "biscoint.offer"
  """
  insert_biscoint_offer(
    """the rows to be inserted"""
    objects: [biscoint_offer_insert_input!]!

    """on conflict condition"""
    on_conflict: biscoint_offer_on_conflict
  ): biscoint_offer_mutation_response

  """
  insert a single row into the table: "biscoint.offer"
  """
  insert_biscoint_offer_one(
    """the row to be inserted"""
    object: biscoint_offer_insert_input!

    """on conflict condition"""
    on_conflict: biscoint_offer_on_conflict
  ): biscoint_offer

  """
  insert data into the table: "biscoint.order"
  """
  insert_biscoint_order(
    """the rows to be inserted"""
    objects: [biscoint_order_insert_input!]!

    """on conflict condition"""
    on_conflict: biscoint_order_on_conflict
  ): biscoint_order_mutation_response

  """
  insert a single row into the table: "biscoint.order"
  """
  insert_biscoint_order_one(
    """the row to be inserted"""
    object: biscoint_order_insert_input!

    """on conflict condition"""
    on_conflict: biscoint_order_on_conflict
  ): biscoint_order

  """
  insert data into the table: "biscoint.trade"
  """
  insert_biscoint_trade(
    """the rows to be inserted"""
    objects: [biscoint_trade_insert_input!]!

    """on conflict condition"""
    on_conflict: biscoint_trade_on_conflict
  ): biscoint_trade_mutation_response

  """
  insert a single row into the table: "biscoint.trade"
  """
  insert_biscoint_trade_one(
    """the row to be inserted"""
    object: biscoint_trade_insert_input!

    """on conflict condition"""
    on_conflict: biscoint_trade_on_conflict
  ): biscoint_trade

  """
  update data of the table: "biscoint.offer"
  """
  update_biscoint_offer(
    """increments the numeric columns with given value of the filtered values"""
    _inc: biscoint_offer_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: biscoint_offer_set_input

    """filter the rows which have to be updated"""
    where: biscoint_offer_bool_exp!
  ): biscoint_offer_mutation_response

  """
  update single row of the table: "biscoint.offer"
  """
  update_biscoint_offer_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: biscoint_offer_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: biscoint_offer_set_input
    pk_columns: biscoint_offer_pk_columns_input!
  ): biscoint_offer

  """
  update data of the table: "biscoint.order"
  """
  update_biscoint_order(
    """increments the numeric columns with given value of the filtered values"""
    _inc: biscoint_order_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: biscoint_order_set_input

    """filter the rows which have to be updated"""
    where: biscoint_order_bool_exp!
  ): biscoint_order_mutation_response

  """
  update single row of the table: "biscoint.order"
  """
  update_biscoint_order_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: biscoint_order_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: biscoint_order_set_input
    pk_columns: biscoint_order_pk_columns_input!
  ): biscoint_order

  """
  update data of the table: "biscoint.trade"
  """
  update_biscoint_trade(
    """increments the numeric columns with given value of the filtered values"""
    _inc: biscoint_trade_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: biscoint_trade_set_input

    """filter the rows which have to be updated"""
    where: biscoint_trade_bool_exp!
  ): biscoint_trade_mutation_response

  """
  update single row of the table: "biscoint.trade"
  """
  update_biscoint_trade_by_pk(
    """increments the numeric columns with given value of the filtered values"""
    _inc: biscoint_trade_inc_input

    """sets the columns of the filtered rows to the given values"""
    _set: biscoint_trade_set_input
    pk_columns: biscoint_trade_pk_columns_input!
  ): biscoint_trade
}

scalar numeric

"""
Boolean expression to compare columns of type "numeric". All fields are combined with logical 'AND'.
"""
input numeric_comparison_exp {
  _eq: numeric
  _gt: numeric
  _gte: numeric
  _in: [numeric!]
  _is_null: Boolean
  _lt: numeric
  _lte: numeric
  _neq: numeric
  _nin: [numeric!]
}

"""column ordering options"""
enum order_by {
  """in ascending order, nulls last"""
  asc

  """in ascending order, nulls first"""
  asc_nulls_first

  """in ascending order, nulls last"""
  asc_nulls_last

  """in descending order, nulls first"""
  desc

  """in descending order, nulls first"""
  desc_nulls_first

  """in descending order, nulls last"""
  desc_nulls_last
}

type query_root {
  """
  fetch data from the table: "biscoint.offer"
  """
  biscoint_offer(
    """distinct select on columns"""
    distinct_on: [biscoint_offer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_offer_order_by!]

    """filter the rows returned"""
    where: biscoint_offer_bool_exp
  ): [biscoint_offer!]!

  """
  fetch aggregated fields from the table: "biscoint.offer"
  """
  biscoint_offer_aggregate(
    """distinct select on columns"""
    distinct_on: [biscoint_offer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_offer_order_by!]

    """filter the rows returned"""
    where: biscoint_offer_bool_exp
  ): biscoint_offer_aggregate!

  """fetch data from the table: "biscoint.offer" using primary key columns"""
  biscoint_offer_by_pk(id: Int!): biscoint_offer

  """
  fetch data from the table: "biscoint.order"
  """
  biscoint_order(
    """distinct select on columns"""
    distinct_on: [biscoint_order_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_order_order_by!]

    """filter the rows returned"""
    where: biscoint_order_bool_exp
  ): [biscoint_order!]!

  """
  fetch aggregated fields from the table: "biscoint.order"
  """
  biscoint_order_aggregate(
    """distinct select on columns"""
    distinct_on: [biscoint_order_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_order_order_by!]

    """filter the rows returned"""
    where: biscoint_order_bool_exp
  ): biscoint_order_aggregate!

  """fetch data from the table: "biscoint.order" using primary key columns"""
  biscoint_order_by_pk(id: Int!): biscoint_order

  """
  fetch data from the table: "biscoint.profit"
  """
  biscoint_profit(
    """distinct select on columns"""
    distinct_on: [biscoint_profit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_profit_order_by!]

    """filter the rows returned"""
    where: biscoint_profit_bool_exp
  ): [biscoint_profit!]!

  """
  fetch aggregated fields from the table: "biscoint.profit"
  """
  biscoint_profit_aggregate(
    """distinct select on columns"""
    distinct_on: [biscoint_profit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_profit_order_by!]

    """filter the rows returned"""
    where: biscoint_profit_bool_exp
  ): biscoint_profit_aggregate!

  """
  fetch data from the table: "biscoint.trade"
  """
  biscoint_trade(
    """distinct select on columns"""
    distinct_on: [biscoint_trade_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_trade_order_by!]

    """filter the rows returned"""
    where: biscoint_trade_bool_exp
  ): [biscoint_trade!]!

  """
  fetch aggregated fields from the table: "biscoint.trade"
  """
  biscoint_trade_aggregate(
    """distinct select on columns"""
    distinct_on: [biscoint_trade_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_trade_order_by!]

    """filter the rows returned"""
    where: biscoint_trade_bool_exp
  ): biscoint_trade_aggregate!

  """fetch data from the table: "biscoint.trade" using primary key columns"""
  biscoint_trade_by_pk(id: Int!): biscoint_trade
}

type subscription_root {
  """
  fetch data from the table: "biscoint.offer"
  """
  biscoint_offer(
    """distinct select on columns"""
    distinct_on: [biscoint_offer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_offer_order_by!]

    """filter the rows returned"""
    where: biscoint_offer_bool_exp
  ): [biscoint_offer!]!

  """
  fetch aggregated fields from the table: "biscoint.offer"
  """
  biscoint_offer_aggregate(
    """distinct select on columns"""
    distinct_on: [biscoint_offer_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_offer_order_by!]

    """filter the rows returned"""
    where: biscoint_offer_bool_exp
  ): biscoint_offer_aggregate!

  """fetch data from the table: "biscoint.offer" using primary key columns"""
  biscoint_offer_by_pk(id: Int!): biscoint_offer

  """
  fetch data from the table: "biscoint.order"
  """
  biscoint_order(
    """distinct select on columns"""
    distinct_on: [biscoint_order_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_order_order_by!]

    """filter the rows returned"""
    where: biscoint_order_bool_exp
  ): [biscoint_order!]!

  """
  fetch aggregated fields from the table: "biscoint.order"
  """
  biscoint_order_aggregate(
    """distinct select on columns"""
    distinct_on: [biscoint_order_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_order_order_by!]

    """filter the rows returned"""
    where: biscoint_order_bool_exp
  ): biscoint_order_aggregate!

  """fetch data from the table: "biscoint.order" using primary key columns"""
  biscoint_order_by_pk(id: Int!): biscoint_order

  """
  fetch data from the table: "biscoint.profit"
  """
  biscoint_profit(
    """distinct select on columns"""
    distinct_on: [biscoint_profit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_profit_order_by!]

    """filter the rows returned"""
    where: biscoint_profit_bool_exp
  ): [biscoint_profit!]!

  """
  fetch aggregated fields from the table: "biscoint.profit"
  """
  biscoint_profit_aggregate(
    """distinct select on columns"""
    distinct_on: [biscoint_profit_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_profit_order_by!]

    """filter the rows returned"""
    where: biscoint_profit_bool_exp
  ): biscoint_profit_aggregate!

  """
  fetch data from the table: "biscoint.trade"
  """
  biscoint_trade(
    """distinct select on columns"""
    distinct_on: [biscoint_trade_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_trade_order_by!]

    """filter the rows returned"""
    where: biscoint_trade_bool_exp
  ): [biscoint_trade!]!

  """
  fetch aggregated fields from the table: "biscoint.trade"
  """
  biscoint_trade_aggregate(
    """distinct select on columns"""
    distinct_on: [biscoint_trade_select_column!]

    """limit the number of rows returned"""
    limit: Int

    """skip the first n rows. Use only with order_by"""
    offset: Int

    """sort the rows by one or more columns"""
    order_by: [biscoint_trade_order_by!]

    """filter the rows returned"""
    where: biscoint_trade_bool_exp
  ): biscoint_trade_aggregate!

  """fetch data from the table: "biscoint.trade" using primary key columns"""
  biscoint_trade_by_pk(id: Int!): biscoint_trade
}

scalar timestamptz

"""
Boolean expression to compare columns of type "timestamptz". All fields are combined with logical 'AND'.
"""
input timestamptz_comparison_exp {
  _eq: timestamptz
  _gt: timestamptz
  _gte: timestamptz
  _in: [timestamptz!]
  _is_null: Boolean
  _lt: timestamptz
  _lte: timestamptz
  _neq: timestamptz
  _nin: [timestamptz!]
}
